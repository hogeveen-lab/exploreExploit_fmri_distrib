#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Explore-Exploit fMRI: Neuron Paper
Extract behavioral data needed to run POMDP
notes: Main code product is file: <model_dat/ACES_allsubs_BANDIT_Modeling.csv>
must move csv to folder containing POMDP scripts, run POMDP in MATLAB, 
move the files to the "model_dat/pomdp_out" directory, and replace "subjid" with "P" in filenames.

author: jeremy hogeveen (jhogeveen@unm.edu)
last edit: March 9, 2022
"""


#%% PREAMBLE
# Importing modules for the script
import os
import glob
import pandas as pd
import numpy as np
import re

# setting up the filepaths
script_dir = os.path.dirname(__file__)
base_dir = os.path.abspath(os.path.join(script_dir,'..'))
behave_dir = os.path.join(base_dir,'behave')
eprime_behave_filename = os.path.join(behave_dir,'*-EDAT-MRI.csv')
custom_behave_filename = os.path.join(behave_dir,'*-MRITRIALINFO_ACEFMRIMEG.csv')
pomdpDat_output_filename = os.path.join(base_dir,'model_dat/ACES_allsubs_BANDIT_Modeling.csv')

# getting the list of filenames we need to open in the series
eprime_files = glob.glob(eprime_behave_filename)
custom_files = glob.glob(custom_behave_filename)
#%%

#%% Generating regressors for event-based analysis (e.g. novel vs. non-novel; reward vs. non-reward)
df_pomdp = pd.DataFrame() # creating a pomdp data frame to be filled in a loop
for i in range(0,len(eprime_files)):
    ##### Step 1: Loading the data #####
    # Pulling the participant number we want to load
    pid_wildcard = re.compile('P0..')
    cursub = pid_wildcard.findall(eprime_files[i])
    # Reading the eprime file
    cursub_eprime_filename = [s for s in eprime_files if cursub[0] in s]
    df_eprime = pd.read_csv(cursub_eprime_filename[0])
    # Reading the trial info file
    cursub_custom_filename = [s for s in custom_files if cursub[0] in s]
    df_custom  = pd.read_csv(cursub_custom_filename[0])
    # merging the datasets
    df_all = pd.concat([df_eprime, df_custom], axis=1)
    ##### Step 2: Filtering the data according to what is needed for the POMDP #####
    df_tmp_filt = pd.DataFrame() # creating a tmp data frame to populate with the vars we need for the POMDP
    df_tmp_filt['Subject'] = df_all['Subject']
    df_tmp_filt['Block'] = df_all['Block']
    df_tmp_filt['Trial'] = df_all['Trial']
    df_tmp_filt['img1'] = df_all['img1']
    df_tmp_filt['img1Prob'] = df_all['img1Prob']
    df_tmp_filt['img2'] = df_all['img2']
    df_tmp_filt['img2Prob'] = df_all['img2prob']
    df_tmp_filt['img3'] = df_all['img3']
    df_tmp_filt['img3Prob'] = df_all['img3prob']
    df_tmp_filt['SessConf.RESP'] = df_all['SessConf.RESP']
    df_tmp_filt['chosen_img'] = df_all['chosen_img']
    df_tmp_filt['chosen_prob'] = df_all['chosen_prob']
    df_tmp_filt['rewarded'] = df_all['rewarded']
    ##### Step 3: Appending the filtered data onto df_pomdp #####
    df_pomdp = df_pomdp.append(df_tmp_filt) #appending current subject's data onto end of the pomdp data frame

##### Step 4: Saving an output file #####
df_pomdp = df_pomdp.replace(np.nan,'NA')
df_pomdp.to_csv(pomdpDat_output_filename, index=False)
#%%